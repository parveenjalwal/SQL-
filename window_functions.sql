# all window functions >> 

use mavenmovies ; 

# qustion 1: 1. Rank the customers based on the total amount they've spent on rentals ? 

#answer >> 
select * from customer ;
select * from payment ;  

select rank() over (order by sum(amount) ) as cust_ranks ,
c.full_name , 
sum(amount) as total_amount  
from customer c 
join payment p 
on c.customer_id = p.customer_id 
group by  c.full_name ;  




#qustion 2 : Calculate the cumulative revenue generated by each film over time ? 

# answer >>
SELECT f.film_id, f.title, p.payment_date, SUM(p.amount) 
       OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM payment p
JOIN rental r USING (rental_id)
JOIN inventory i USING (inventory_id)
JOIN film f USING (film_id); 



# qustion 3 :  Determine the average rental duration for each film, considering films with similar lengths.

#answer >> 
select * from film ; 
SELECT film_id, title, length, AVG(rental_duration) 
       OVER (PARTITION BY length) AS avg_rental_duration
FROM film; 



#qustion 4 : . Identify the top 3 films in each category based on their rental counts. 

# answer >>  
select *
from 
(select row_number() over (partition by c.name order by count(rental_id) desc ) as movie_rank ,
f.title  , c.name , 
count(rental_id) as total_rental 
from film f 
join film_category fc on fc.film_id = f.film_id 
join category c on c.category_id = fc.category_id 
join inventory i  on i.film_id = f.film_id
join rental r on r.inventory_id = i.inventory_id 
group by c.name , f.title ) 
as ranked_movies 
where movie_rank <= 3 ; 

-- the whole qurry which  containsrank movie of  each category movie based on rental count warrped up as subqurry inside main qurry 



#qsution 5:  Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.

# answer >> 
select  full_name ,
count(rentals) as totol_rental ,
round(avg(rentals),1) as avg_retnal , 
round((count(rentals) - avg(rentals)),1) as rental_diff
from (
select rank() over (partition by full_name order by rental_id)as rentals , full_name ,
rental_id 
from customer c 
join rental r
on c.customer_id = r.customer_id )  
as rented_film 
group by full_name ;  



# qustion 6: Find the monthly revenue trend for the entire rental store over time ? 

# answer >> 
select store_id , 
year(date(payment_date)) as payment_year ,
month(date(payment_date)) as payment_month  ,
sum(amount) as total_revanue  
from payment p  
join staff s 
on s.staff_id = p.staff_id 
group by store_id, payment_year , payment_month
order by store_id ,  payment_month  ;   



# qustion 7 : . Identify the customers whose total spending on rentals falls within the top 20% of all customers ? 

# answer >> 
select full_name , total_spent 
from 
( select ntile(5) over (order by sum(amount) desc )as cust_rank, full_name ,
sum(amount) as total_spent  
from customer c 
join rental r on r.customer_id = c.customer_id 
join payment p on r.rental_id  = p.rental_id 
group by full_name 
order by total_spent desc) 
as customers_total_spent 
where cust_rank = 1 ;



#qustion 8 :  Calculate the running total of rentals per category, ordered by rental count ? 

#answer > 

select * , sum(total_rental) over (order by total_rental) as runing_total 
from 
(select c.name ,
count(*) as total_rental
from category c 
join film_category fc on c.category_id = fc.category_id 
join inventory i on fc.film_id = i.film_id 
join rental r on i.inventory_id = r.inventory_id 
group by  c.name 
order by name , total_rental desc) 
as catogry_total_rental ;  



#qustion 9:  Find the films that have been rented less than the average rental count for their respective categories.

# answer >> 
WITH AvgCategoryRentals AS (
    SELECT c.name AS category, f.film_id, f.title, COUNT(r.rental_id) AS rental_count,
           AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.name) AS avg_rental_count
    FROM rental r
    JOIN inventory i USING (inventory_id)
    JOIN film f USING (film_id)
    JOIN film_category fc USING (film_id)
    JOIN category c USING (category_id)
    GROUP BY c.name, f.film_id, f.title
)
SELECT film_id, title, rental_count FROM AvgCategoryRentals 
WHERE rental_count < avg_rental_count; 



# qustion 10:  Identify the top 5 months with the highest revenue and display the revenue generated in each month ? 

# answer >> 
select * from payment; 
select * from rental ; 

select  
year(date(payment_date)) as payment_year ,
month(date(payment_date)) as payment_month  ,
sum(amount) as total_revanue  
from payment 
group by payment_year , payment_month 
order by total_revanue desc
limit 5 ; 


select * from film ; 






